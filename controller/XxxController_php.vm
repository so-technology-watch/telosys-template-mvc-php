<?php
#set ( $_ = "$" )
#set ( $uncapEntityName = ${fn.uncapitalize($entity.name)} )
#set ( $capEntityName = ${fn.capitalize($entity.name)} )
##
#set( $entityFormatAttrs = "" )
#foreach( $attribute in $entity.attributes )
#if( $foreach.count < 2 )
#set( $entityFormatAttrs = "${_}data['"+${attribute.name}+"']" )
#else
#set( $entityFormatAttrs = $entityFormatAttrs + ", ${_}data['"+${attribute.name}+"']" )
#end ## end if
#end ## end foreach
##
#set( $entityKeyAttrs = "" )
#foreach( $attribute in $entity.keyAttributes)
#if( $foreach.count < 2 )
#set( $entityKeyAttrs = "${_}"+${attribute.name} )
#else
#set( $entityKeyAttrs = $entityKeyAttrs + ", "+"${_}"+${attribute.name} )
#end ## end if
#end ## end foreach
##
// Entity Controller
class ${capEntityName}Controller
{
    private static ${_}_instance = null;

    public static function getInstance() {
        if (is_null(self::${_}_instance)) {
            self::${_}_instance = new ${capEntityName}Controller();
        }
        return self::${_}_instance;
    }

    private ${_}twig;
    private ${_}${capEntityName}Repository;

    public function __construct() {
        ${_}loader = new Twig_Loader_Filesystem('./view');
        ${_}twig = new Twig_Environment(${_}loader);
        ${_}this->twig = ${_}twig;

        // Persistence implementation
        ${_}this->${capEntityName}Repository = ${capEntityName}Repository::getInstance();
    }

    /**
     * Data population method
     * @param ${_}data
     * @return ${capEntityName}
     */
    public function populate(${_}data) {
        return new ${capEntityName}($entityFormatAttrs);
    }

    /**
     * Get all entities method
     * @param null ${_}msg
     * @return string
     */
    public function getAll(${_}msg = null) {
        ${_}${uncapEntityName}s = ${_}this->${capEntityName}Repository->getAll();
        return ${_}this->twig->render('${capEntityName}List.twig', ['${uncapEntityName}s' => ${_}${uncapEntityName}s, 'msg' => ${_}msg]);
    }

    /**
     * Create one entity form display method
     * @return string
     */
    public function createForm() {
        return ${_}this->twig->render('${uncapEntityName}Form.twig');
    }

    /**
     * Update one entity form display method
     * @param ${_}id
     * @return string
     */
    public function updateForm($entityKeyAttrs) {
        ${_}${uncapEntityName} = ${_}this->${capEntityName}Repository->getOne($entityKeyAttrs);
        return ${_}this->twig->render('${uncapEntityName}View.twig', ['${uncapEntityName}' => ${_}${uncapEntityName}] );
    }

    /**
     * Create one entity method
     * @param ${_}data
     * @return string
     */
    public function create(${_}data) {
        ${_}${uncapEntityName} = ${_}this->populate(${_}data);
        ${_}msg = ${_}this->${capEntityName}Repository->create(${_}${uncapEntityName});
        return ${_}this->getAll(${_}msg);
    }

    /**
     * Update one entity method
     * @param ${_}data
     * @return string
     */
    public function update(${_}data) {
        ${_}${uncapEntityName} = ${_}this->populate(${_}data);
        ${_}msg =  ${_}this->${capEntityName}Repository->update(${_}${uncapEntityName});
        return ${_}this->getAll(${_}msg);
    }

    /**
     * Delete one entity method
     * @return string
     */
    public function delete($entityKeyAttrs) {
        ${_}msg =  ${_}this->${capEntityName}Repository->delete($entityKeyAttrs);
        return ${_}this->getAll(${_}msg);
    }
}